from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime
from contextlib import asynccontextmanager
import logging
import os
from dotenv import load_dotenv
import aiohttp

from database import DatabaseManager
from ai_service import DobbyAIService

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

db = DatabaseManager()
ai_service = DobbyAIService(os.getenv('FIREWORKS_API_KEY', ''))

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifecycle events"""
    # Startup
    await db.init_database()
    logger.info("üöÄ DobbyLearn API started")
    yield
    # Shutdown
    await db.close()

app = FastAPI(
    title="DobbyLearn API",
    description="API –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤",
    version="2.0.0",
    lifespan=lifespan
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ú–û–î–ï–õ–ò PYDANTIC ===

class GroupResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –≥—Ä—É–ø–ø–æ–π —Å–ª–æ–≤"""
    id: int
    name: str
    description: Optional[str]
    icon: str
    color: str
    total_words: int
    learned_words: int

class WordResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å–æ —Å–ª–æ–≤–æ–º"""
    id: int
    word: str
    translation: Optional[str]
    knowledge_level: int
    next_review: datetime
    learned: bool

class ReviewRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    word_id: int
    difficulty: str  # 'again', 'hard', 'good', 'easy'

# === –≠–ù–î–ü–û–ò–ù–¢–´ ===

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞—Ç—å index.html"""
    return FileResponse("index.html")

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "ok", "message": "DobbyLearn API is running"}

@app.get("/api/groups/{telegram_id}")
async def get_groups(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db.get_user_by_telegram_id(telegram_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        groups = await db.get_user_groups(user.id)
        
        return [
            {
                "id": g.id,
                "name": g.name,
                "description": g.description,
                "icon": g.icon,
                "color": g.color,
                "total_words": g.total_words,
                "learned_words": g.learned_words,
                "native_language": g.native_language,
                "target_language": g.target_language
            }
            for g in groups
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/words/{telegram_id}")
async def get_words_for_review(telegram_id: int, group_id: Optional[int] = None, limit: int = 20):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è 
    - telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    - group_id: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
    """
    try:
        user = await db.get_user_by_telegram_id(telegram_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        words = await db.get_words_for_review(user.id, group_id, limit)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è–∑—ã–∫–∞—Ö
        groups = await db.get_user_groups(user.id)
        group_languages = {g.id: (g.target_language, g.native_language) for g in groups}
        
        return [
            {
                "id": w.id,
                "word": w.word,
                "translation": w.translation,
                "knowledge_level": w.knowledge_level,
                "next_review": w.next_review.isoformat() if w.next_review else None,
                "learned": w.learned,
                "review_count": w.review_count,
                "correct_count": w.correct_count,
                "wrong_count": w.wrong_count,
                "group_id": w.group_id,
                "word_language": group_languages.get(w.group_id, ("en", "ru"))[0],  # target_language –≥—Ä—É–ø–ø—ã
                "translation_language": group_languages.get(w.group_id, ("en", "ru"))[1]  # native_language
            }
            for w in words
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/review")
async def update_review(review: ReviewRequest):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è 
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - word_id: ID —Å–ª–æ–≤–∞
    - difficulty: —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ('again', 'hard', 'good', 'easy')
    
    """
    try:
        if review.difficulty not in ['again', 'hard', 'good', 'easy']:
            raise HTTPException(
                status_code=400, 
                detail="difficulty –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: again, hard, good, –∏–ª–∏ easy"
            )
        
        success = await db.update_word_progress_anki(review.word_id, review.difficulty)
        
        if not success:
            raise HTTPException(status_code=404, detail="–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return {
            "success": True,
            "message": f"–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {review.difficulty}"
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/words/group/{group_id}")
async def get_group_words(group_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        words = await db.get_group_words(group_id)
        
        return [
            {
                "id": w.id,
                "word": w.word,
                "translation": w.translation,
                "learned": w.learned,
                "knowledge_level": w.knowledge_level,
                "review_count": w.review_count
            }
            for w in words
        ]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))

class AIExampleRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é AI –ø—Ä–∏–º–µ—Ä–∞"""
    word: str
    native_language: str = "ru"
    target_language: str = "en"
    style: str = "casual"  # casual, formal, slang

@app.post("/api/ai/example")
async def generate_ai_example(request: AIExampleRequest):
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–ª–æ–≤–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - word: —Å–ª–æ–≤–æ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä
    - native_language: —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (ru, en, es, fr, de, tr)
    - target_language: —è–∑—ã–∫ –∏–∑—É—á–∞–µ–º–æ–≥–æ —Å–ª–æ–≤–∞
    - style: —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ—Ä–∞ (casual, formal, slang)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - example: –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
    - translation: –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫
    """
    try:
        result = await ai_service.generate_single_example(
            word=request.word,
            style=request.style,
            translation="",  
            language=request.target_language  # –Ø–∑—ã–∫ —Å–ª–æ–≤–∞ (–∏—Å–ø–∞–Ω—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏ —Ç.–¥.)
        )
        
        if not result:
            raise HTTPException(status_code=500, detail="AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä")
        
        return {
            "success": True,
            "example": result.get('example_text', ''),
            "translation": result.get('example_translation', ''),  
            "context": result.get('context', ''),
            "word": request.word
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/ai/translate")
async def translate_word(word: str, native_language: str = "ru", target_language: str = "en"):
    """
    –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - word: —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    - native_language: –Ω–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    - target_language: —Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - translation: –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
    - word: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
    """
    try:
        result = await ai_service.translate_word(
            word=word,
            target_language=target_language,
            native_language=native_language
        )
        
        return {
            "success": True,
            "word": word,
            "translation": result.get('translation')
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# === LEGACY ENDPOINTS (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º) ===

@app.post("/api/generate-example")
async def generate_example_legacy(request: AIExampleRequest):
    """
    Legacy —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å index.html)
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ /api/ai/example
    """
    return await generate_ai_example(request)

def generate_simple_pronunciation(word: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é IPA —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    """
    word = word.lower()
    result = []
    
    # –ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    vowel_map = {
        'a': '√¶', 'e': '…õ', 'i': '…™', 'o': '…ë', 'u': ' å',
        'ee': 'iÀê', 'ea': 'iÀê', 'oo': 'uÀê', 'ou': 'a ä',
        'ow': 'o ä', 'ay': 'e…™', 'ai': 'e…™', 'oy': '…î…™',
        'igh': 'a…™', 'ie': 'a…™'
    }
    
    consonant_map = {
        'ch': 't É', 'sh': ' É', 'th': 'Œ∏', 'ph': 'f',
        'ng': '≈ã', 'qu': 'kw', 'ck': 'k'
    }
    
    i = 0
    while i < len(word):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω—ã–µ –±—É–∫–≤—ã
        if i < len(word) - 1:
            two_chars = word[i:i+2]
            if two_chars in consonant_map:
                result.append(consonant_map[two_chars])
                i += 2
                continue
            if two_chars in vowel_map:
                result.append(vowel_map[two_chars])
                i += 2
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–æ–π–Ω—ã–µ –±—É–∫–≤—ã (igh)
        if i < len(word) - 2:
            three_chars = word[i:i+3]
            if three_chars in vowel_map:
                result.append(vowel_map[three_chars])
                i += 3
                continue
        
        # –û–¥–∏–Ω–æ—á–Ω—ã–µ –±—É–∫–≤—ã
        char = word[i]
        if char in vowel_map:
            result.append(vowel_map[char])
        elif char == 'y' and i > 0:
            result.append('i')
        else:
            result.append(char)
        i += 1
    
    return f"/{''.join(result)}/"

@app.post("/api/generate-pronunciation")
async def generate_pronunciation(data: dict):
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ (IPA)
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
    - word_id: ID —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ)
    –∏–ª–∏
    - word: —Ç–µ–∫—Å—Ç —Å–ª–æ–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - pronunciation: IPA —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    """
    logger.info(f"üì¢ Pronunciation request: {data}")
    
    word = None
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª word_id - –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –ë–î
    word_id = data.get('word_id') or data.get('wordId') or data.get('id')
    if word_id:
        logger.info(f"üîç Looking up word by ID: {word_id}")
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from sqlalchemy import select
            from models import Word
            
            async with db.get_session() as session:
                result = await session.execute(
                    select(Word.word).where(Word.id == word_id)
                )
                row = result.first()
                if row:
                    word = row[0]
                    logger.info(f"‚úÖ Found word in DB: {word}")
        except Exception as e:
            logger.error(f"Error getting word from DB: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –Ω–∞–ø—Ä—è–º—É—é
    if not word:
        word = data.get('word') or data.get('text') or data.get('term') or data.get('value')
    
    if not word:
        logger.warning(f"‚ö†Ô∏è Could not find word: {data}")
        return {
            "success": False,
            "error": "Word not found",
            "pronunciation": ""
        }
    
    logger.info(f"üî§ Generating pronunciation for: {word}")
    
    # —Å–ª–æ–≤–∞—Ä—å —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤ —Å IPA
    common_ipa = {
        "heavy": "Ààh…õvi",
        "hello": "h…ôÀàlo ä",
        "world": "w…úÀêrld",
        "example": "…™…°Ààz√¶mp…ôl",
        "learn": "l…úÀêrn",
        "study": "Ààst ådi",
        "book": "b äk",
        "house": "ha äs",
        "cat": "k√¶t",
        "dog": "d…îÀê…°",
        "water": "Ààw…îÀêt…ôr",
        "food": "fuÀêd",
        "love": "l åv",
        "friend": "fr…õnd",
        "family": "Ààf√¶m…ôli",
        "apple": "Àà√¶p…ôl",
        "coffee": "Ààk…îÀêfi",
        "computer": "k…ômÀàpjuÀêt…ôr",
        "beautiful": "ÀàbjuÀêt…ôf…ôl",
        "important": "…™mÀàp…îÀêrt…ônt",
        "time": "ta…™m",
        "ocean": "Àào ä É…ôn",
        "thought": "Œ∏…îÀêt",
        "future": "ÀàfjuÀêt É…ôr",
        "rhythm": "Ààr…™√∞…ôm",
        "energy": "Àà…õn…ôrd íi",
        "create": "kriÀàe…™t",
        "balance": "Ààb√¶l…ôns",
        "whisper": "Ààw…™sp…ôr",
        "shadow": "Àà É√¶do ä",
        "school": "skuÀêl",
        "happy": "Ààh√¶pi",
        "travel": "Ààtr√¶v…ôl",
        "strong": "str…îÀê≈ã",
        "night": "na…™t",
        "new": "njuÀê",
        "try": "tra…™",
        "people": "ÀàpiÀêp…ôl",
        "work": "w…úÀêrk",
        "good": "…° äd",
        "great": "…°re…™t",
        "thing": "Œ∏…™≈ã",
        "know": "no ä",
        "think": "Œ∏…™≈ãk",
        "year": "j…™r",
        "day": "de…™",
        "life": "la…™f",
        "hand": "h√¶nd",
        "part": "p…ëÀêrt"
    }
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
    if word.lower() in common_ipa:
        pronunciation = f"/{common_ipa[word.lower()]}/"
        logger.info(f"‚úÖ Found in local dictionary: {pronunciation}")
    else:
        # –ø–æ–ª—É—á–∏—Ç—å –∏–∑ FreeDictionaryAPI
        pronunciation = None
        try:
            async with aiohttp.ClientSession() as session:
                url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word.lower()}"
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=2)) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data and len(data) > 0:
                            phonetics = data[0].get('phonetics', [])
                            for phonetic in phonetics:
                                ipa_text = phonetic.get('text', '')
                                if ipa_text and len(ipa_text) > 2:
                                    pronunciation = ipa_text.strip('/')
                                    pronunciation = f"/{pronunciation}/"
                                    logger.info(f"‚úÖ Found via FreeDictionaryAPI: {pronunciation}")
                                    break
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è FreeDictionaryAPI failed: {str(e)[:100]}")
        
        # 3. –ø—Ä–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        if not pronunciation:
            # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è fallback
            pronunciation = generate_simple_pronunciation(word)
            logger.info(f"üìù Generated simple pronunciation: {pronunciation}")
    
    logger.info(f"‚úÖ Final pronunciation result: {pronunciation}")
    
    return {
        "success": True,
        "word": word,
        "pronunciation": pronunciation
    }

@app.post("/api/update-progress")
async def update_progress(data: dict):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç
    - word_id: ID —Å–ª–æ–≤–∞
    - quality –∏–ª–∏ difficulty: –æ—Ü–µ–Ω–∫–∞ –∑–Ω–∞–Ω–∏—è
    
     –∫–Ω–æ–ø–∫–∏:
    - Again (0) = —Å–Ω–æ–≤–∞
    - Hard (1) = —Å–ª–æ–∂–Ω–æ  
    - Good (2) = —Ö–æ—Ä–æ—à–æ
    - Easy (3) = –ª–µ–≥–∫–æ
    """
    try:
        logger.info(f"üìä Update progress request: {data}")
        
        word_id = data.get('word_id') or data.get('wordId') or data.get('id')
        
        if not word_id:
            logger.error("‚ùå No word_id in request")
            raise HTTPException(status_code=400, detail="word_id is required")
        
        logger.info(f"üÜî Word ID: {word_id}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å quality (0-3) –≤ difficulty (again/hard/good/easy)
        quality = data.get('quality')
        difficulty = data.get('difficulty')
        
        logger.info(f"üìà Quality: {quality}, Difficulty: {difficulty}")
        
        if quality is not None:
            # –ú–∞–ø–ø–∏–Ω–≥ quality -> difficulty
            quality_map = {
                0: 'again',
                1: 'hard',
                2: 'good',
                3: 'easy'
            }
            difficulty = quality_map.get(int(quality), 'good')
            logger.info(f"üîÑ Mapped quality {quality} -> difficulty {difficulty}")
        
        if not difficulty or difficulty not in ['again', 'hard', 'good', 'easy']:
            difficulty = 'good'  # Default
            logger.warning(f"‚ö†Ô∏è Using default difficulty: {difficulty}")
        
        logger.info(f"üíæ Updating DB: word_id={word_id}, difficulty={difficulty}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
        success = await db.update_word_progress_anki(word_id, difficulty)
        
        if not success:
            logger.error(f"‚ùå DB update failed for word_id={word_id}")
            raise HTTPException(status_code=404, detail="Word not found")
        
        logger.info(f"‚úÖ Progress updated successfully: {difficulty}")
        
        # –ü–æ–ª—É—á–∏—Ç—å user_id –∏–∑ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        from sqlalchemy import select
        from models import Word
        
        async with db.get_session() as session:
            result = await session.execute(
                select(Word.user_id, Word.group_id).where(Word.id == word_id)
            )
            row = result.first()
            if row:
                user_id = row[0]
                group_id = row[1]
                
                # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ!)
                next_words = await db.get_words_for_review(user_id, group_id, limit=5)
                
                # –ò—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
                logger.info(f"üîç Before filter: {len(next_words)} words, excluding word_id={word_id}")
                next_words = [w for w in next_words if w.id != word_id]
                logger.info(f"üîç After filter: {len(next_words)} words remaining")
                
                if next_words:
                    next_words = [next_words[0]]  # –í–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                
                response = {
                    "success": True,
                    "word_id": word_id,
                    "difficulty": difficulty,
                    "message": f"Progress updated: {difficulty}",
                    "next_word": None
                }
                
                if next_words:
                    next_word = next_words[0]
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è next_word
                    from sqlalchemy import select
                    from models import WordGroup
                    
                    async with db.get_session() as session:
                        result = await session.execute(
                            select(WordGroup.target_language, WordGroup.native_language)
                            .where(WordGroup.id == group_id)
                        )
                        group_langs = result.first()
                        word_lang = group_langs[0] if group_langs else 'en'
                        trans_lang = group_langs[1] if group_langs else 'ru'
                    
                    response["next_word"] = {
                        "id": next_word.id,
                        "word": next_word.word,
                        "translation": next_word.translation,
                        "knowledge_level": next_word.knowledge_level,
                        "learned": next_word.learned,
                        "next_review": next_word.next_review.isoformat() if next_word.next_review else None,
                        "word_language": word_lang,  # –Ø–∑—ã–∫ —Å–ª–æ–≤–∞ (target_language –≥—Ä—É–ø–ø—ã)
                        "translation_language": trans_lang  # –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (native_language)
                    }
                    logger.info(f"üì§ Sending next word: {next_word.word} (id={next_word.id}, level={next_word.knowledge_level}, next={next_word.next_review}, lang={word_lang})")
                else:
                    logger.info("‚ú® No more words to review!")
                
                return response
        
        # Fallback 
        return {
            "success": True,
            "word_id": word_id,
            "difficulty": difficulty,
            "message": f"Progress updated: {difficulty}",
            "next_word": None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üí• Error updating progress: {e}")
        import traceback
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

# –°—Ç–∞—Ç–∏—á–∫–∞ 
app.mount("/static", StaticFiles(directory="static"), name="static")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
