from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

Base = declarative_base()

class User(Base):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram"""
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
    native_language = Column(String(10), default="ru")  # –ë–∞–∑–æ–≤—ã–π —è–∑—ã–∫ (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
    language_setup_complete = Column(Boolean, default=False)  # –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime, default=func.now())
    last_active = Column(DateTime, default=func.now())
    
    # Relationships
    word_groups = relationship("WordGroup", back_populates="user", cascade="all, delete-orphan")
    words = relationship("Word", back_populates="user", cascade="all, delete-orphan")

class WordGroup(Base):
    """–ì—Ä—É–ø–ø–∞ —Å–ª–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    __tablename__ = "word_groups"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    name = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    icon = Column(String(10), default="üìö")
    color = Column(String(7), default="#667eea")
    created_at = Column(DateTime, default=func.now())
    is_active = Column(Boolean, default=True)
    
    # –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
    native_language = Column(String(10), default="ru")
    target_language = Column(String(10), default="en")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_words = Column(Integer, default=0)
    learned_words = Column(Integer, default=0)
    
    # Relationships
    user = relationship("User", back_populates="word_groups")
    words = relationship("Word", back_populates="group", cascade="all, delete-orphan")

class Word(Base):
    """–°–ª–æ–≤–æ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    __tablename__ = "words"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    group_id = Column(Integer, ForeignKey("word_groups.id"), nullable=True)
    
    # –î–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    word = Column(String(255), nullable=False, index=True)
    translation = Column(Text, nullable=True)
    
    # –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    knowledge_level = Column(Integer, default=0)  # 0=–Ω–æ–≤–æ–µ, 1-4+ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è
    next_review = Column(DateTime, default=func.now())  # –ö–æ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–æ–≤–∞
    last_reviewed = Column(DateTime, nullable=True)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    review_count = Column(Integer, default=0)  # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä—è–ª–∏
    correct_count = Column(Integer, default=0)  # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    wrong_count = Column(Integer, default=0)  # –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
    
    # –§–ª–∞–≥ –∏–∑—É—á–µ–Ω–∏—è
    learned = Column(Boolean, default=False)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(DateTime, default=func.now())
    added_via = Column(String(20), default="chat")  # chat, manual
    
    # Relationships
    user = relationship("User", back_populates="words")
    group = relationship("WordGroup", back_populates="words")
