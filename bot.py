import asyncio
import logging
import re
from typing import List
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from database import DatabaseManager
from ai_service import DobbyAIService

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DobbyLearnBot:
    def __init__(self, bot_token: str, fireworks_api_key: str, webapp_url: str):
        self.bot_token = bot_token
        self.webapp_url = webapp_url
        self.db = DatabaseManager()
        self.ai_service = DobbyAIService(fireworks_api_key)
        self.application = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_current_group = {}
        self.user_creating_group = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.user_state = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
        self.LANGUAGES = {
            "en": "üá¨üáß English",
            "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
            "es": "üá™üá∏ Espa√±ol",
            "fr": "üá´üá∑ Fran√ßais",
            "de": "üá©üá™ Deutsch",
            "tr": "üáπüá∑ T√ºrk√ße"
        }

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        await self.db.init_database()
        
        self.application = Application.builder().token(self.bot_token).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("create_group", self.create_group_command))
        self.application.add_handler(CommandHandler("groups", self.list_groups_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
        setup_complete, native_lang = await self.db.get_user_language_setup_status(user.id)
        
        if not setup_complete:
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
            await self.show_language_selection(update)
            return
        
        # –°–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await self.db.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        welcome_text = f"""
  **Hi, {user.first_name}! I'm Dobby!** 

Welcome to **DobbyLearn** - AI-powered language learning!

‚ú® **Key Features:**
‚Ä¢ ü§ñ **AI auto-translation** - just type any word!
‚Ä¢ üìù **AI examples** - unique every time
‚Ä¢ üéØ **Anki system** - smart spaced repetition
‚Ä¢ üåç **Multi-language** - learn any language
‚Ä¢ üìö **Groups** - organize by topics

üìñ **How to use:**
1Ô∏è‚É£ Create a group (or use default)
2Ô∏è‚É£ Just type words in chat:
```
serendipity
resilient, ephemeral
```
3Ô∏è‚É£ Open app ‚Üí AI already translated everything! üöÄ

Your base language: **{self.LANGUAGES.get(native_lang, native_lang)}**
"""
        
        keyboard = [
            [InlineKeyboardButton(
                "üéì Open DobbyLearn", 
                web_app=WebAppInfo(url=self.webapp_url)
            )],
            [InlineKeyboardButton("‚ûï Create Group", callback_data="create_group"),
             InlineKeyboardButton("üìö My Groups", callback_data="show_groups")],
            [InlineKeyboardButton("üåç Change Language", callback_data="change_language")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def show_language_selection(self, update: Update, is_first_time: bool = True):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞"""
        if is_first_time:
            text = """
üëã **Welcome to DobbyLearn!**

First, select your **base language** (for translations and explanations):
"""
        else:
            text = """
üåç **Change base language**

Select your **base language** (for translations and explanations):
"""
        
        # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤
        keyboard = []
        for lang_code, lang_name in self.LANGUAGES.items():
            keyboard.append([
                InlineKeyboardButton(
                    lang_name,
                    callback_data=f"set_native_lang_{lang_code}"
                )
            ])
        
        
        if not is_first_time:
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è Back to Menu", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode='Markdown', reply_markup=reply_markup
            )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
  **DobbyLearn Commands:**

**Main:**
‚Ä¢ `/start` - Start bot
‚Ä¢ `/help` - This help
‚Ä¢ `/groups` - Show all groups

**Groups:**
‚Ä¢ `/create_group [name]` - Create new group
  Example: `/create_group Spanish Cities`

**Adding words:**
Just send words to chat:
```
adventure, journey, quest
```
or:
```
adventure
journey
quest
```

ü§ñ **AI will automatically:**
‚úÖ Translate to your base language
‚úÖ Generate unique example sentence
‚úÖ Add pronunciation
‚úÖ Create flashcard

üéì **Open Mini App to start learning!**
"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def list_groups_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ callback"""
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π update –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeUpdate:
            def __init__(self, callback_query):
                self.callback_query = callback_query
                self.message = None
                self.effective_user = callback_query.from_user
        
        fake_update = FakeUpdate(query)
        await self.list_groups_command(fake_update, context)
    
    async def list_groups_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —Ç–µ–≥–∞–º–∏ —è–∑—ã–∫–æ–≤"""
        user_id = update.effective_user.id
        
        db_user = await self.db.get_or_create_user(user_id)
        groups = await self.db.get_user_groups(db_user.id)
        
        if not groups:
            await update.message.reply_text(
                "üìö No groups yet.\n"
                "Use `/create_group [name]` to create!"
            )
            return
        
        text = "üìö **Your word groups:**\n\n"
        keyboard = []
        
        for group in groups:
            progress = 0
            if group.total_words > 0:
                progress = int((group.learned_words / group.total_words) * 100)
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥ —è–∑—ã–∫–∞
            native_lang = getattr(group, 'native_language', 'ru')
            target_lang = getattr(group, 'target_language', 'en')
            lang_tag = await self.db.get_language_tag(native_lang, target_lang)
            
            text += f"{group.icon} **{group.name}** {lang_tag}\n"
            text += f"   üìñ Words: {group.total_words} | ‚úÖ Learned: {group.learned_words} ({progress}%)\n\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{group.icon} {group.name} {lang_tag}",
                    callback_data=f"select_group_{group.id}"
                )
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("‚ûï Create Group", callback_data="create_group")],
            [InlineKeyboardButton("üéì Open App", 
                                web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("‚óÄÔ∏è Back to Menu", callback_data="back_to_main")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ update.message –∏–ª–∏ callback query
        if update.message:
            await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)

    async def create_group_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É - —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "üìö **Create a group**\n\n"
                "Usage: `/create_group [name]`\n\n"
                "**Examples:**\n"
                "‚Ä¢ `/create_group Spanish Cities`\n"
                "‚Ä¢ `/create_group Movie Vocabulary`"
            )
            return
        
        group_name = " ".join(context.args)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        self.user_creating_group[user_id] = group_name
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
        await self.show_target_language_selection(update, group_name)

    async def show_target_language_selection(self, update, group_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        user_id = update.effective_user.id if update.effective_user else None
        
        # –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id:
            _, native_lang = await self.db.get_user_language_setup_status(user_id)
        else:
            native_lang = "ru"
        
        text = f"""
üìö Creating group: **{group_name}**

Select the **language you're learning** in this group:
"""
        
        keyboard = []
        for lang_code, lang_name in self.LANGUAGES.items():
            if lang_code != native_lang:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫
                keyboard.append([
                    InlineKeyboardButton(
                        lang_name,
                        callback_data=f"set_target_lang_{lang_code}"
                    )
                ])
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå Cancel", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                text, parse_mode='Markdown', reply_markup=reply_markup
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
        if query.data.startswith("set_native_lang_"):
            lang_code = query.data.replace("set_native_lang_", "")
            
            db_user = await self.db.get_or_create_user(user_id)
            await self.db.update_user_language_setup(db_user.id, lang_code)
            
            # –û–±–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –≤–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.update_all_user_groups_language(db_user.id, lang_code)
            
            keyboard = [
                [InlineKeyboardButton("‚ûï Create Group", callback_data="create_group")],
                [InlineKeyboardButton("üéì Open DobbyLearn", 
                                    web_app=WebAppInfo(url=self.webapp_url))],
                [InlineKeyboardButton("‚óÄÔ∏è Back to Menu", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ Base language set: **{self.LANGUAGES[lang_code]}**\n\n"
                f"All your groups updated to translate to {self.LANGUAGES[lang_code]}!\n\n"
                f"Now you can create groups and add words!",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
        elif query.data.startswith("set_target_lang_"):
            target_lang = query.data.replace("set_target_lang_", "")
            group_name = self.user_creating_group.get(user_id, "My Words")
            
            db_user = await self.db.get_or_create_user(user_id)
            _, native_lang = await self.db.get_user_language_setup_status(user_id)
            
            # –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
            group = await self.db.create_word_group(
                user_id=db_user.id,
                name=group_name,
                native_language=native_lang,
                target_language=target_lang
            )
            
            self.user_current_group[user_id] = group.id
            
            lang_tag = await self.db.get_language_tag(native_lang, target_lang)
            
            keyboard = [
                [InlineKeyboardButton("üéì Open DobbyLearn", 
                                    web_app=WebAppInfo(url=self.webapp_url))],
                [InlineKeyboardButton("‚ûï Create Another", callback_data="create_group"),
                 InlineKeyboardButton("üìö My Groups", callback_data="show_groups")],
                [InlineKeyboardButton("‚óÄÔ∏è Back to Menu", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ Group **{group_name}** {lang_tag} created!\n\n"
                f"Learning: **{self.LANGUAGES[target_lang]}**\n"
                f"Translations: **{self.LANGUAGES[native_lang]}**\n\n"
                f"Now send words and AI will handle the rest! ü§ñ",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.user_creating_group:
                del self.user_creating_group[user_id]
        
        elif query.data == "show_groups":
            await self.list_groups_callback(query, context)
        
        elif query.data == "change_language":
            await self.show_language_selection(update, is_first_time=False)
        
        elif query.data.startswith("select_group_"):
            group_id = int(query.data.split("_")[2])
            self.user_current_group[user_id] = group_id
            
            keyboard = [
                [InlineKeyboardButton("üéì Open DobbyLearn", 
                                    web_app=WebAppInfo(url=self.webapp_url))],
                [InlineKeyboardButton("‚óÄÔ∏è Back to Menu", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚úÖ Group selected!\n\nAll new words will be added to this group.",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        elif query.data == "back_to_main":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if user_id in self.user_state:
                del self.user_state[user_id]
            if user_id in self.user_creating_group:
                del self.user_creating_group[user_id]
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user = query.from_user
            db_user = await self.db.get_or_create_user(user_id)
            _, native_lang = await self.db.get_user_language_setup_status(user_id)
            
            welcome_text = f"""
  **Hi, {user.first_name}! I'm Dobby!** 

Welcome to **DobbyLearn** - AI-powered language learning!

‚ú® **Key Features:**
‚Ä¢ ü§ñ **AI auto-translation** - just type any word!
‚Ä¢ üìù **AI examples** - unique every time
‚Ä¢ üéØ **Anki system** - smart spaced repetition
‚Ä¢ üåç **Multi-language** - learn any language
‚Ä¢ üìö **Groups** - organize by topics

üìñ **How to use:**
1Ô∏è‚É£ Create a group (or use default)
2Ô∏è‚É£ Just type words in chat:
```
serendipity
resilient, ephemeral
```
3Ô∏è‚É£ Open app ‚Üí AI already translated everything! üöÄ

Your base language: **{self.LANGUAGES.get(native_lang, native_lang)}**
"""
            
            keyboard = [
                [InlineKeyboardButton(
                    "üéì Open DobbyLearn", 
                    web_app=WebAppInfo(url=self.webapp_url)
                )],
                [InlineKeyboardButton("‚ûï Create Group", callback_data="create_group"),
                 InlineKeyboardButton("üìö My Groups", callback_data="show_groups")],
                [InlineKeyboardButton("üåç Change Language", callback_data="change_language")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                welcome_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        elif query.data == "create_group":
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
            self.user_state[user_id] = "awaiting_group_name"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå Cancel", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìö **Create a new group**\n\n"
                "üìù Please type the group name:\n\n"
                "**Examples:**\n"
                "‚Ä¢ Spanish Movies\n"
                "‚Ä¢ Daily Words\n"
                "‚Ä¢ Tech Vocabulary",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ —Å AI –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if not text:
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await self.db.get_or_create_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —è–∑—ã–∫–∞
        setup_complete, native_lang = await self.db.get_user_language_setup_status(user_id)
        if not setup_complete:
            await self.show_language_selection(update)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        if self.user_state.get(user_id) == "awaiting_group_name":
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
            self.user_creating_group[user_id] = text
            del self.user_state[user_id]
            
            await self.show_target_language_selection(update, text)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
        group_id = self.user_current_group.get(user_id)
        if not group_id:
            groups = await self.db.get_user_groups(db_user.id)
            if groups:
                group_id = groups[0].id
                self.user_current_group[user_id] = group_id
        
        # –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã (–ò native_lang –∏–∑ –≥—Ä—É–ø–ø—ã!)
        groups = await self.db.get_user_groups(db_user.id)
        target_lang = "en"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        native_lang = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        for g in groups:
            if g.id == group_id:
                target_lang = g.target_language
                native_lang = g.native_language  # –ë–†–ê–¢–¨ native_lang –ò–ó –ì–†–£–ü–ü–´!
                break
        
        # –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–ª–æ–≤–∞
        words = await self.parse_words(text)
        
        if not words:
            await update.message.reply_text("‚ùå Could not parse words. Try again!")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        status_msg = await update.message.reply_text(
            f"ü§ñ AI is processing {len(words)} word(s)...\n"
            f"üìñ Words in {self.LANGUAGES[target_lang]}\n"
            f"üìù Translating to {self.LANGUAGES[native_lang]}..."
        )
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ —Å AI –ø–µ—Ä–µ–≤–æ–¥–æ–º
        added_count = 0
        for word in words:
            try:
                # –ü–æ–ª—É—á–∏—Ç—å AI –ø–µ—Ä–µ–≤–æ–¥ + –ø—Ä–∏–º–µ—Ä
                # –°–ª–æ–≤–æ –Ω–∞ target_lang (—è–∑—ã–∫ –≥—Ä—É–ø–ø—ã), –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ native_lang
                translation_data = await self.ai_service.translate_word(
                    word=word,
                    source_language=target_lang,  # –Ø–∑—ã–∫ –°–õ–û–í–ê (–∏—Å–ø–∞–Ω—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                    target_language=native_lang   # –Ø–∑—ã–∫ –ü–ï–†–ï–í–û–î–ê (—Ä—É—Å—Å–∫–∏–π)
                )
                
                await self.db.add_word(
                    user_id=db_user.id,
                    word_data={
                        'word': word,
                        'translation': translation_data.get('translation'),
                        'added_via': 'chat'
                    },
                    group_id=group_id
                )
                added_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ {word}: {e}")
        
        if added_count > 0:
            await status_msg.edit_text(
                f"‚úÖ Added **{added_count}** word(s)!\n\n"
                f"ü§ñ AI translated to {self.LANGUAGES[native_lang]}\n"
                f"üìù Examples generated\n\n"
                f"üéì Open app to start learning!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üéì Open DobbyLearn", 
                                       web_app=WebAppInfo(url=self.webapp_url))
                ]])
            )
        else:
            await status_msg.edit_text("‚ùå Could not add words. Try again!")

    async def parse_words(self, text: str) -> List[str]:
        """–†–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        words = []
        
        if ',' in text:
            parts = text.split(',')
            for part in parts:
                word = part.strip().lower()
                if word and len(word) > 1:
                    words.append(word)
        elif '\n' in text:
            parts = text.split('\n')
            for part in parts:
                word = part.strip().lower()
                if word and len(word) > 1:
                    words.append(word)
        else:
            word = text.strip().lower()
            if word and len(word) > 1:
                words.append(word)
        
        return words

def main():
    import os
    load_dotenv()
    
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    fireworks_api_key = os.getenv("FIREWORKS_API_KEY", "")
    webapp_url = os.getenv("WEBAPP_URL", "https://yourdomain.com")
    
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    logger.info("DobbyLearn Bot with AI starting...")
    
    # –°–æ–∑–¥–∞—Ç—å event loop –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    bot = DobbyLearnBot(bot_token, fireworks_api_key, webapp_url)
    loop.run_until_complete(bot.initialize())
    
    logger.info("‚úÖ Bot initialized, starting polling...")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å polling 
    bot.application.run_polling()

if __name__ == "__main__":
    main()
