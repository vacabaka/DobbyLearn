import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy import select, update, delete, func
from sqlalchemy.orm import sessionmaker
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import logging

from models import Base, User, WordGroup, Word

logger = logging.getLogger(__name__)

class DatabaseManager:
    def __init__(self, database_url: str = "sqlite+aiosqlite:///db/dobbylearn.db"):
        self.database_url = database_url
        self.engine = create_async_engine(database_url, echo=False)
        self.async_session = sessionmaker(
            self.engine, class_=AsyncSession, expire_on_commit=False
        )

    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with self.engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def init_db(self):
        return await self.init_database()

    def get_session(self) -> AsyncSession:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.async_session()

    #–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    
    async def create_or_get_user(self, telegram_id: int, username: str = None, 
                               first_name: str = None, last_name: str = None) -> User:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.get_or_create_user(telegram_id, username, first_name, last_name)
    
    async def get_or_create_user(self, telegram_id: int, username: str = None, 
                               first_name: str = None, last_name: str = None) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ"""
        async with self.get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                user.last_active = func.now()
                if username:
                    user.username = username
                if first_name:
                    user.first_name = first_name
                if last_name:
                    user.last_name = last_name
                await session.commit()
                return user
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
            
            # –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self.create_default_group(user.id)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
            return user

    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        async with self.get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            return result.scalar_one_or_none()

    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò
    
    async def create_default_group(self, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        async with self.get_session() as session:
            default_group = WordGroup(
                user_id=user_id,
                name="–ú–æ–∏ —Å–ª–æ–≤–∞",
                description="–û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å–ª–æ–≤",
                icon="üìö",
                color="#667eea"
            )
            session.add(default_group)
            await session.commit()

    async def create_word_group(self, user_id: int, name: str, description: str = "", 
                              icon: str = "üìö", color: str = "#667eea",
                              native_language: str = "ru", target_language: str = "en") -> Optional[WordGroup]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Å–ª–æ–≤"""
        async with self.get_session() as session:
            group = WordGroup(
                user_id=user_id,
                name=name,
                description=description,
                icon=icon,
                color=color,
                native_language=native_language,
                target_language=target_language
            )
            session.add(group)
            await session.commit()
            await session.refresh(group)
            return group

    async def get_user_groups(self, user_id: int) -> List[WordGroup]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_session() as session:
            result = await session.execute(
                select(WordGroup)
                .where(WordGroup.user_id == user_id, WordGroup.is_active == True)
                .order_by(WordGroup.created_at)
            )
            return result.scalars().all()

    async def delete_group(self, group_id: int, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"""
        async with self.get_session() as session:
            result = await session.execute(
                select(WordGroup).where(
                    WordGroup.id == group_id,
                    WordGroup.user_id == user_id
                )
            )
            group = result.scalar_one_or_none()
            
            if group:
                group.is_active = False
                await session.commit()
                return True
            return False

    async def update_group_stats(self, group_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã"""
        async with self.get_session() as session:
            # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
            total_result = await session.execute(
                select(func.count(Word.id)).where(Word.group_id == group_id)
            )
            total_words = total_result.scalar() or 0
            
            # –ü–æ–¥—Å—á–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö
            learned_result = await session.execute(
                select(func.count(Word.id)).where(
                    Word.group_id == group_id,
                    Word.learned == True
                )
            )
            learned_words = learned_result.scalar() or 0
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await session.execute(
                update(WordGroup).where(WordGroup.id == group_id).values(
                    total_words=total_words,
                    learned_words=learned_words
                )
            )
            await session.commit()

    # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏ 
    
    async def add_word(self, user_id: int, word_data: Dict[str, Any], group_id: int = None) -> Word:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"""
        async with self.get_session() as session:
            # –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            if not group_id:
                result = await session.execute(
                    select(WordGroup).where(
                        WordGroup.user_id == user_id,
                        WordGroup.is_active == True
                    ).order_by(WordGroup.created_at).limit(1)
                )
                default_group = result.scalar_one_or_none()
                if default_group:
                    group_id = default_group.id

            word = Word(
                user_id=user_id,
                group_id=group_id,
                word=word_data.get('word', '').lower().strip(),
                translation=word_data.get('translation'),
                added_via=word_data.get('added_via', 'chat')
            )
            
            session.add(word)
            await session.commit()
            await session.refresh(word)
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
            if group_id:
                await self.update_group_stats(group_id)
            
            return word

    async def get_words_for_review(self, user_id: int, group_id: int = None, limit: int = 20) -> List[Word]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        async with self.get_session() as session:
            current_time = datetime.now()  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –∏ –≤ update
            
            # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º NULL –∑–Ω–∞—á–µ–Ω–∏–π
            from sqlalchemy import or_
            
            query = select(Word).where(
                Word.user_id == user_id,
                or_(
                    Word.next_review.is_(None),  # –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –¥–∞—Ç—ã
                    Word.next_review <= current_time  # –ò–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                )
            )
            
            if group_id:
                query = query.where(Word.group_id == group_id)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ > —Å–ª–æ–∂–Ω—ã–µ > –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            query = query.order_by(
                Word.knowledge_level.asc(),  # –ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
                Word.next_review.asc().nulls_first()  # –ù–æ–≤—ã–µ (NULL) –ø–µ—Ä–≤—ã–º–∏, –ø–æ—Ç–æ–º —Å—Ç–∞—Ä—ã–µ
            ).limit(limit)
            
            result = await session.execute(query)
            words = result.scalars().all()
            
            logger.info(f"üìã Words for review: found {len(words)} words (user={user_id}, group={group_id})")
            for w in words[:3]:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"  - {w.word} (id={w.id}, level={w.knowledge_level}, next={w.next_review})")
            
            return words

    async def get_user_words(self, user_id: int, group_id: int = None) -> List[Word]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_session() as session:
            query = select(Word).where(Word.user_id == user_id)
            
            if group_id:
                query = query.where(Word.group_id == group_id)
            
            query = query.order_by(Word.created_at.desc())
            
            result = await session.execute(query)
            return result.scalars().all()

    async def get_group_words(self, group_id: int) -> List[Word]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–µ"""
        async with self.get_session() as session:
            result = await session.execute(
                select(Word).where(Word.group_id == group_id)
            )
            return result.scalars().all()

    # —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π 
    
    async def update_word_progress_anki(self, word_id: int, difficulty_level: str) -> bool:
        """        
        Args:
            word_id: ID —Å–ª–æ–≤–∞
            difficulty_level: 'again', 'hard', 'good', 'easy'
        
        –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤:
        - Level 0 (—É—á—É —Å–µ–π—á–∞—Å): 1–º, 10–º, 1—á, 4—á (–∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã!)
        - Level 1 (–≤—ã—É—á–∏–ª –Ω–µ–¥–∞–≤–Ω–æ): 10–º, 4—á, 1–¥, 3–¥
        - Level 2: 1–¥, 3–¥, 7–¥, 14–¥
        - Level 3: 1–¥, 7–¥, 14–¥, 30–¥
        - Level 4+: 1–¥, 14–¥, 30–¥, 60–¥
        
        –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        INTERVALS_MINUTES = {
            # Level 0: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
            0: {'again': 1, 'hard': 10, 'good': 60, 'easy': 240},  # 1–º, 10–º, 1—á, 4—á
            # Level 1: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–Ω—è–º
            1: {'again': 10, 'hard': 240, 'good': 1440, 'easy': 4320},  # 10–º, 4—á, 1–¥, 3–¥
            # Level 2+: –¥–ª–∏–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã 
            2: {'again': 1440, 'hard': 4320, 'good': 10080, 'easy': 20160},  # 1–¥, 3–¥, 7–¥, 14–¥
            3: {'again': 1440, 'hard': 10080, 'good': 20160, 'easy': 43200},  # 1–¥, 7–¥, 14–¥, 30–¥
            4: {'again': 1440, 'hard': 20160, 'good': 43200, 'easy': 86400},  # 1–¥, 14–¥, 30–¥, 60–¥
        }
        
        async with self.get_session() as session:
            try:
                result = await session.execute(select(Word).where(Word.id == word_id))
                word = result.scalar_one_or_none()
                
                if not word:
                    return False
                
                current_level = min(word.knowledge_level or 0, 4)
                interval_minutes = INTERVALS_MINUTES[current_level][difficulty_level]
                
                # –í—ã—á–∏—Å–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                next_review = datetime.now() + timedelta(minutes=interval_minutes)
                
                # –û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è
                if difficulty_level == 'again':
                    new_level = max(0, current_level - 1)
                elif difficulty_level == 'hard':
                    new_level = current_level
                elif difficulty_level == 'good':
                    new_level = current_level + 1
                elif difficulty_level == 'easy':
                    new_level = current_level + 2
                else:
                    new_level = current_level
                
                # –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–æ
                word.knowledge_level = new_level
                word.next_review = next_review
                word.last_reviewed = datetime.now()
                word.review_count += 1
                
                if difficulty_level in ['good', 'easy']:
                    word.correct_count += 1
                    if new_level >= 3:
                        word.learned = True
                else:
                    word.wrong_count += 1
                    word.learned = False
                
                await session.commit()
                
                # –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
                if interval_minutes < 60:
                    interval_text = f"{interval_minutes} –º–∏–Ω"
                elif interval_minutes < 1440:
                    interval_text = f"{interval_minutes // 60} —á"
                else:
                    interval_text = f"{interval_minutes // 1440} –¥–Ω"
                
                logger.info(f"–°–ª–æ–≤–æ {word_id} ({word.word}): —É—Ä–æ–≤–µ–Ω—å {current_level}‚Üí{new_level}, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval_text}, next_review={next_review.strftime('%H:%M:%S')}")
                return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                await session.rollback()
                return False

    async def delete_word(self, word_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"""
        async with self.get_session() as session:
            try:
                await session.execute(delete(Word).where(Word.id == word_id))
                await session.commit()
                return True
            except Exception as e:
                await session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: {e}")
                return False

    #  —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏
    
    async def update_user_language_setup(self, user_id: int, native_language: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π"""
        async with self.get_session() as session:
            try:
                query = update(User).where(User.id == user_id).values(
                    native_language=native_language,
                    language_setup_complete=True
                )
                await session.execute(query)
                await session.commit()
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
                await session.rollback()
                return False
    
    async def update_all_user_groups_language(self, user_id: int, native_language: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å native_language –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_session() as session:
            try:
                from models import WordGroup
                query = update(WordGroup).where(WordGroup.user_id == user_id).values(
                    native_language=native_language
                )
                result = await session.execute(query)
                await session.commit()
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {result.rowcount} –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —è–∑—ã–∫ {native_language}")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö: {e}")
                await session.rollback()
                return False
    
    async def get_user_language_setup_status(self, telegram_id: int) -> tuple:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞"""
        async with self.get_session() as session:
            result = await session.execute(
                select(User.language_setup_complete, User.native_language)
                .where(User.telegram_id == telegram_id)
            )
            row = result.first()
            if row:
                return row[0] or False, row[1] or "ru"
            return False, "ru"
    
    async def get_language_tag(self, native_lang: str, target_lang: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥ —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        lang_codes = {
            "en": "ENG", "ru": "RUS", "es": "ESP", "fr": "FRA", 
            "de": "GER", "it": "ITA", "pt": "POR", "zh": "CHN", 
            "ja": "JPN", "tr": "TUR"
        }
        target_code = lang_codes.get(target_lang, target_lang.upper()[:3])
        return f"[{target_code}]"

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        await self.engine.dispose()
